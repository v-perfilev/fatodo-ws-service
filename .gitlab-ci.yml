image: openjdk:17-jdk

variables:
  MAVEN_CLI_OPTS: -ntp --batch-mode -s etc/maven/settings.xml
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME
  TAG: $CI_COMMIT_SHORT_SHA
  HELM_REPOSITORY: ${CI_API_V4_URL}/projects/${HELM_PROJECT_ID}/packages/helm/stable

cache:
  paths:
    - .m2/repository/
    - .sonar/cache/

stages:
  - compile
  - UT
  - IT
  - analyze
  - publish
  - deploy

compile:
  stage: compile
  script:
    - ./mvnw $MAVEN_CLI_OPTS compile $MAVEN_OPTS
  artifacts:
    paths:
      - target/

unit-tests:
  stage: UT
  dependencies:
    - compile
  script:
    - ./mvnw $MAVEN_CLI_OPTS test $MAVEN_OPTS
  artifacts:
    paths:
      - target/
  except:
    variables:
      - $DEPLOY_ONLY
      - $NEXUS_ONLY

integration-tests:
  stage: IT
  dependencies:
    - compile
  script:
    - ./mvnw $MAVEN_CLI_OPTS verify $MAVEN_OPTS
      -DskipUTs
  artifacts:
    paths:
      - target/
  except:
    variables:
      - $DEPLOY_ONLY
      - $NEXUS_ONLY

contract-tests:
  stage: IT
  dependencies:
    - compile
  script:
    - ./mvnw $MAVEN_CLI_OPTS initialize test-compile failsafe:integration-test failsafe:verify $MAVEN_OPTS
      -Pcontracts
      -Dmaven.repo.url=$MAVEN_URL
      -Dmaven.repo.username=$MAVEN_USERNAME
      -Dmaven.repo.password=$MAVEN_PASSWORD
  artifacts:
    paths:
      - target/
  except:
    variables:
      - $DEPLOY_ONLY
      - $NEXUS_ONLY

sonar:
  stage: analyze
  dependencies:
    - unit-tests
    - integration-tests
  script:
    - ./mvnw $MAVEN_CLI_OPTS initialize sonar:sonar $MAVEN_OPTS
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_TOKEN
  artifacts:
    paths:
      - target/
  except:
    variables:
      - $DEPLOY_ONLY
      - $NEXUS_ONLY

checkstyle:
  stage: analyze
  script:
    - ./mvnw $MAVEN_CLI_OPTS checkstyle:check $MAVEN_OPTS
  except:
    variables:
      - $DEPLOY_ONLY
      - $NEXUS_ONLY

#publish-to-docker:
#  image: docker:20
#  stage: publish
#  services:
#    - docker:20-dind
#  script:
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#    - docker build -t $IMAGE:$TAG -t $IMAGE:latest .
#    - docker push $IMAGE:$TAG
#    - docker push $IMAGE:latest
#  only:
#    - develop
#    - master
#
#publish-to-nexus:
#  stage: publish
#  dependencies:
#    - compile
#  script:
#    - ./mvnw $MAVEN_CLI_OPTS deploy $MAVEN_OPTS
#      -Dmaven.test.skip=true
#      -Dmaven.repo.url=$MAVEN_URL
#      -Dmaven.repo.username=$MAVEN_USERNAME
#      -Dmaven.repo.password=$MAVEN_PASSWORD
#  except:
#    variables:
#      - $DEPLOY_ONLY
#  only:
#    - develop
#
#deploy-to-stage:
#  image: alpine:latest
#  stage: deploy
#  script:
#    - chmod og= $STAGE_SERVER_ID_RSA
#    - apk update && apk add openssh-client
#    - ssh -i $STAGE_SERVER_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
#    - ssh -i $STAGE_SERVER_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker pull $IMAGE:$TAG"
#    - ssh -i $STAGE_SERVER_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker container rm -f $APP_NAME || true"
#    - ssh -i $STAGE_SERVER_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "docker run -d $DOCKER_APP_PARAMS $DOCKER_COMMON_PARAMS --name $APP_NAME $IMAGE:$TAG"
#  environment:
#    name: staging
#    url: $STAGE_SERVER_URL
#  only:
#    - develop
#
#deploy-to-prod:
#  stage: deploy
#  image: dtzar/helm-kubectl:3.10
#  before_script:
#    - export KUBECONFIG=$PROD_KUBECONFIG
#  script:
#    - helm repo add project --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${HELM_REPOSITORY}
#    - helm upgrade $HELM_PROJECT_NAME project/$HELM_PROJECT_CHART
#      --install --wait --reuse-values
#      --set $HELM_APP_NAME.image.repository=$IMAGE
#      --set $HELM_APP_NAME.image.tag=$TAG
#  environment:
#    name: production
#    url: $PROD_URL
#  only:
#    - master
